iffalse <- c(0, 0, 0)
ifelse(cond, iftrue, iffalse)
cond <- c(TRUE, FALSE, NA)
iftrue <- c(1, 1, 1)
iffalse <- c(NA, 0, 0)
ifelse(cond, iftrue, iffalse)
cond1 <- c(TRUE, FALSE, NA)
cond2 <- c(TRUE, TRUE, NA)
iftrue <- c(1, 1, 1)
iffalse <- c(NA, 0, 0)
ifelse(cond1 | cond1, iftrue, iffalse)
ifelse(cond1 | cond2, iftrue, iffalse)
cond1 <- c(TRUE, FALSE, NA)
cond2 <- c(TRUE, TRUE, NA)
iftrue <- c(1, 1, 1)
iffalse <- c(NA, 0, 0)
ifelse(cond1 & cond2, iftrue, iffalse)
cond1 & cond2
for(i in 1:5) {
print("hello")
}
for(x in 1:5) {
print("hello")
}
for(jim in 1:5) {
print(paste("hello", jim))
}
1:5
jim
for(jim in c(-4, 1,5,7)) {
print(paste("hello", jim))
}
for(jim in c(-4, 1,5,7)) {
print(paste("hello"))
}
jim
for(jim in c(-4, 1,5,7)) {
print(paste("hello", jim))
}
jim
for(jim in c(3:1)) {
print(paste("hello", jim))
}
jim
library(palmerpenguins)
mu.body_mass <- mean(penguins$body_mass_g, na.rm = TRUE)
mu.body_mass
bsmeans <- vector("numeric", length = 2000)
bsmeans
vector("character", 3)
mu.body_mass <- mean(penguins$body_mass_g, na.rm = TRUE)
bsmeans <- vector("numeric", length = 2000)
for(i in 1:length(bsmeans)) {
resampled.body_mass <- sample(penguins$body_mass_g, replace = TRUE)
bsmeans[i] <- mean(resampled.body_mass, na.rm = TRUE)
}
?sample
hist(bsmeans)
sample(penguins$body_mass_g, replace = TRUE)
sample(penguins$body_mass_g, replace = TRUE) |> length()
nrow(penguins)
abline(v = mu.body_mass, col = "red")
species_names <- levels(penguins$species)
levels(penguins$species)
species_names
library(colorspace)
colors <- colorspace::qualitative_hcl(length(species_names))
colors
colorspace::qualitative_hcl
?qualitative_hcl
species_names
colors
species_names <- levels(penguins$species)
colors <- colorspace::qualitative_hcl(length(species_names))
for(i in 1:length(species_names)){
if(i == 1) {
plot(bill_length_mm ~ bill_depth_mm,
pch = 20, col = colors[i],
data = subset(penguins, species == species_names[i]),
xlim = range(penguins$bill_depth_mm, na.rm = TRUE),
ylim = range(penguins$bill_length_mm, na.rm = TRUE)
)
} else {
points(bill_length_mm ~ bill_depth_mm,
pch = 20, col = colors[i],
data = subset(penguins, species == species_names[i]))
}
}
legend("topleft", fill = colors, legend = species_names)
1:length(species_names)
i <- 1
plot(bill_length_mm ~ bill_depth_mm,
pch = 20, col = colors[i],
data = subset(penguins, species == species_names[i]),
xlim = range(penguins$bill_depth_mm, na.rm = TRUE),
ylim = range(penguins$bill_length_mm, na.rm = TRUE)
)
i <- 2
points(bill_length_mm ~ bill_depth_mm,
pch = 20, col = colors[i],
data = subset(penguins, species == species_names[i]))
i <- 3
points(bill_length_mm ~ bill_depth_mm,
pch = 20, col = colors[i],
data = subset(penguins, species == species_names[i]))
library(palmerpenguins)
penguins
1:ncol(penguins)
penguins[, 1]
penguins[[1]]
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
if(is.numeric(thisvar)) {
print(mean(thisvar))
}
}
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
if(is.numeric(thisvar)) {
print(mean(thisvar, na.rm = TRUE))
}
}
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
thisvarname <- names(penguins)[i]
if(is.numeric(thisvar)) {
print(thisvarname, mean(thisvar, na.rm = TRUE))
}
}
thisvarname
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
thisvarname <- names(penguins)[i]
if(is.numeric(thisvar)) {
print(paste(thisvarname, mean(thisvar, na.rm = TRUE), sep = ":"))
}
}
names(penguins)
get("mean")
funcs <- c("mean", "sd", "median", "iqr")
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
thisvarname <- names(penguins)[i]
if(is.numeric(thisvar)) {
for(j in 1:length(funcs)) {
print(thisvarname)
thisfunc <- get(funcs[j])
print(paste(funcs[j],
thisfunc(thisvar, na.rm = TRUE),
sep = ": "))
}
}
}
funcs <- c("mean", "sd", "median", "IQR")
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
thisvarname <- names(penguins)[i]
if(is.numeric(thisvar)) {
print(thisvarname)
for(j in 1:length(funcs)) {
thisfunc <- get(funcs[j])
print(paste(funcs[j],
thisfunc(thisvar, na.rm = TRUE),
sep = ": "))
}
}
}
resultmatrix <- matrix(NA, nrow = 4, ncol = ncol(penguins))
funcs <- c("mean", "sd", "median", "IQR")
for(i in 1:ncol(penguins)) {
thisvar <- penguins[[i]]
thisvarname <- names(penguins)[i]
if(is.numeric(thisvar)) {
print(thisvarname)
for(j in 1:length(funcs)) {
thisfunc <- get(funcs[j])
print(paste(funcs[j],
thisfunc(thisvar, na.rm = TRUE),
sep = ": "))
resultmatrix[j,i] <- thisfunc(thisvar, na.rm = TRUE)
}
}
}
resultmatrix
rownames(resultmatrix) <- funcs
colnames(resultmatrix) <- colnames(penguins)
resultmatrix
c
c(1, 2, 3, 4)
c(1, 2, 3, 4, 4, 5, 6)
summary
summary.data.frame
M1 <- matrix(rnorm(1000), nrow = 100, ncol = 10)
head(M1)
colnames(M1) <- paste0("X", 1:10)
head(M1)
apply(M1, MARGIN = 2, FUN = median)
apply(M1, MARGIN = 1, FUN = median)
library(palmerpenguins)
tapply(X = penguins$bill_depth_mm, INDEX = penguins$species,
FUN = mean)
?tapply
tapply(X = penguins$bill_depth_mm, INDEX = penguins$species,
FUN = mean, na.rm = TRUE)
?lapply
split(penguins$bill_depth_mm, penguins$species)
lapply(split(penguins$bill_depth_mm, penguins$species),
FUN = mean, na.rm = TRUE)
least_squares_constructor <- function(dataY, dataX) {
function(beta) {
sum((dataY - (beta[1] + beta[2] * dataX))^2, na.rm  =TRUE)
}
}
model_penguin <- least_squares_constructor(penguins$flipper_length_mm,
penguins$body_mass_g)
model_penguin
model_penguin(c(1, 2))
ls(environment(model_penguin))
get("dataX", environment(model_penguin))
penguins$body_mass_g
all(get("dataX", environment(model_penguin)) == penguins$body_mass_g)
all(get("dataX", environment(model_penguin)) == penguins$body_mass_g, na.rm = TRUE)
model_penguin
model_test <- function(beta) {
sum((dataY - (beta[1] + beta[2] * dataX))^2, na.rm  =TRUE)
}
c
print
methods("print")
class(penguins$flipper_length_mm)
converter <- get(paste0("as.", class(penguins$flipper_length_mm)))
converter
mean(penguins$flipper_length_mm, na.rm = TRUE)
converter(mean(penguins$flipper_length_mm, na.rm = TRUE))
split(penguins$flipper_length_mm, penguins$species)
mean.sd.by.species <- lapply(split(penguins$flipper_length_mm, penguins$species),
function(x) c(mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE)))
mean.sd.by.species
do.call("rbind", mean.sd.by.species)
?paste0
loansek <- 1241518 + 1200166 + 1131655
6400000 - loansek - .01 * 6400000
?sprintf
grepl("d{3}", c(
"d",
"dd",
"ddd",
"dddd"
))
grepl("d{3}", c(
"d",
"dd",
"ddd",
"dddfd"
))
grepl("d{3}", c(
"d",
"dd",
"ddd",
"ddfdfd"
))
grepl("d+", c(
"d",
"dd",
"ddd",
"ddddd"
))
library(lubridate)
install.packages("lubridate")
library(lubridate)
?wday
wday(ymd("2010-03-10"))
wday(ymd("2010-03-10"), label = TRUE)
wday(ymd("2010-03-10"), label = TRUE,
locale = "DN")
wday(ymd("2010-03-10"), label = TRUE,
locale = "DK")
wday(ymd("2010-03-10"), label = TRUE,
locale = "DK_DN")
wday(ymd("2010-03-10"), label = TRUE,
locale = "DEN")
wday(ymd("2010-03-10"), label = TRUE,
locale = "da_DK")
?month
grepl("^D15[0-9A-Z]{1,4}$", c("D159"))
library(dplyr)
sessionInfo()
install.packages("dplyr")
grepl("^D15[\d.]+$", c("D159"))
grepl("^D15[\d.]+$", c("D159"))
grepl("^D15[\\d.]+$", c("D159"))
grepl("^D15[\\d.]+$", c("D159"))
grepl("^D15[\\d]+$", c("D159"))
library(dplyr)
library(data.table)
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
x
y
setdiff(x$key, y$key)
?setdiff
setdiff(y$key, x$key)
merge(x, y, by = "key")
?merge
merge(x, y, by = "key", all = TRUE)
merge(x, y, by = "key", all.x = TRUE)
merge(x, y, by = "key", all.y = TRUE)
x <- tribble(
~key1, ~key2, ~val_x,
1,1, "x1",
1,2, "x1b",
2,1, "x2",
3,1, "x3"
)
y <- tribble(
~key1,~key2, ~val_y,
1,1, "y1",
1,2, "y1b",
2,1, "y2",
4,1, "y3"
)
merge(x, y, by = "key", all.x = TRUE)
merge(x, y, by = "key1", all.x = TRUE)
merge(x, y, by = c("key1", "key2"), all.x = TRUE)
merge(x, y, all.x = TRUE)
?data.table
?join_by
?merge
library(lme4)
install.packages("lme4")
library(lme4)
?lmer
m1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
terms(m1)
fixef(m1)
m1
?lmerControl
?barplot
library(ggplot2)
?geom_bar
?reshape
## Alternative regular expressions for guessing names
df3 <- data.frame(id = 1:4, age = c(40,50,60,50), dose1 = c(1,2,1,2),
dose2 = c(2,1,2,1), dose4 = c(3,3,3,3))
reshape(df3, direction = "long", varying = 3:5, sep = "")
df3
171 * 2
171 * 3
24450 + 29728
(mike_income_dkk + erin_income_dkk) * .32
erin_income_sek <- 171216
erin_income_dkk <- 462795
erin_income_usd <- 5300
mike_income_dkk <- 395344
mike_income_sek <- 154684
mike_income_usd <- 7920
sektousd <- .096
dkktousd <- .15
erin_income_dkk * dkktousd + erin_income_sek * sektousd + erin_income_usd
mike_income_dkk * dkktousd + mike_income_sek * sektousd + mike_income_usd
24450 + 29728
(mike_income_dkk + erin_income_dkk) * .32
274605 + 54178
274605 * dkktousd + 54178 * sektousd
7692 / 60
7692 / 60^1
7692 / 60^2
7692 / 24
7692 / (60
* 24)
?ggplot2::geom_bar
?scale_y_continuous
library(ggplot2)
?scale_y_continuous
mtcars
ggplot(mtcars, aes(x = factor(gear), fill = factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = factor(gear), fill = factor(cyl))) + geom_bar(position = position_dodge())
ggplot(mtcars, aes(x = factor(gear), fill = factor(cyl))) +
geom_bar(position = position_dodge()) +
scale_y_continuous(trans = trans_new("divide",
transform = \(x) x / 58,
inverse = \(x) x * 58))
ggplot(mtcars, aes(x = factor(gear), fill = factor(cyl))) +
geom_bar(position = position_dodge()) +
scale_y_continuous(trans = scales::trans_new("divide",
transform = \(x) x / 58,
inverse = \(x) x * 58))
scales::trans_new("divide",
transform = \(x) x / 58,
inverse = \(x) x * 58
)
library(scales)
sqrt_trans()
2/58
setwd("C:/Users/sachs/Applied/Hvidovre/talks/causal-targets")
?datasets
n <- 800
C <- rnorm(n)
X <- rbinom(n, 1, plogis(-1 + 2 * C))
mean(X)
n <- 800
C <- rnorm(n)
X <- rbinom(n, 1, plogis(-1 + 2 * C))
Y <- 1 + 1 * X + C + .5 * X * C + rnorm(n)
simdata <- data.frame(C, Y, X)
fit <- glm(Y ~ C + X + C:X, data = simdata)
simdata0 <- simdata1 <- simdata
simdata0$X <- 0
simdata1$X <- 1
EYi_1 <- predict(fit, newdata = simdata1)
EYi_0 <- predict(fit, newdata = simdata0)
mean(EYi_0) - mean(EYi_0)
mean(EYi_1) - mean(EYi_0)
library("stdReg")
?stdGlm
stdfit <- stdGlm(fit, data = simdata, X = "X", x = c(0, 1))
summary(stdfit)
summary(stdfit, contrast = "difference")
summary(stdfit, contrast = "difference", reference = 0)
B <- 1000
bootests <- rep(NA, B)
for(i in 1:B) {
simdata.star <- simdata[sample(1:nrow(simdata),
nrow(simdata), replace = TRUE), ]
fit <- glm(Y ~ C + X + C:X, data = simdata.star)
simdata0 <- simdata1 <- simdata.star
simdata0$X <- 0
simdata1$X <- 1
bootests[i] <- mean(predict(fit, newdata = simdata1)) -
mean(predict(fit, newdata = simdata0))
}
sd(bootests)
quantile(bootests, c(0.025, 0.9756))
summary(stdfit, contrast = "difference", reference = 0)
n <- 800
C <- rnorm(n)
X <- rbinom(n, 1, plogis(-1 + 2 * C))
Y <- rbinom(n, 1, plogis(1 + 1 * X + C + .5 * X * C))
simdata <- data.frame(C, Y, X)
fit <- glm(Y ~ C + X + C:X, data = simdata, family = "binomial")
simdata0 <- simdata1 <- simdata
simdata0$X <- 0
simdata1$X <- 1
EYi_1 <- predict(fit, newdata = simdata1, type = "response")
EYi_0 <- predict(fit, newdata = simdata0, type = "response")
mean(EYi_1) - mean(EYi_0)
mean(EYi_1) / mean(EYi_0)
stdfit <- stdGlm(fit, X = "X", x = c(0,1))
stdfit <- stdGlm(fit, X = "X", x = c(0,1), data = simdata)
summary(stdfit, contrast = "difference", reference = 0)
summary(stdfit, contrast = "ratio", reference = 0)
library(dagitty)
?plot.dagitty
library(survival)
?lung
library(survival)
head(rotterdam)
cfit <- coxph(Surv(dtime, death) ~ hormon + age + meno + grade + er, data = sdata)
library(survival)
head(rotterdam)
sdata <- rotterdam
cfit <- coxph(Surv(dtime, death) ~ hormon + age + meno + grade + er, data = sdata)
?predict.coxph
plot(cfit)
plot(survfit(cfit))
?survfit.coxph
Ey0 <- survfit(cfit, newdata = sdata0)
library(survival)
head(rotterdam)
sdata <- rotterdam
cfit <- coxph(Surv(dtime, death) ~ hormon + age + meno + grade + er, data = sdata)
sdata0 <- sdata1 <- sdata
sdata0$hormon <- 0
sdata1$hormon <- 1
Ey0 <- survfit(cfit, newdata = sdata0)
Ey1 <- survfit(cfit, newdata = sdata1)
Ey0t <- survfit(cfit, newdata = sdata0)
Ey1t <- survfit(cfit, newdata = sdata1)
mean(Ey0t$surv[max(which(Ey0$time <= 3000)), ])
mean(Ey1t$surv[max(which(Ey1$time <= 3000)), ]) -
mean(Ey0t$surv[max(which(Ey0$time <= 3000)), ])
stdcfit <- stdCoxph(cfit, data = sdata, X = "hormon", x = c(0, 1))
library(survival)
head(rotterdam)
sdata <- rotterdam
cfit <- coxph(Surv(dtime, death) ~ hormon + age + meno + grade + er,
data = sdata, ties = "breslow")
sdata0 <- sdata1 <- sdata
sdata0$hormon <- 0
sdata1$hormon <- 1
Ey0t <- survfit(cfit, newdata = sdata0, se.fit = FALSE)
Ey1t <- survfit(cfit, newdata = sdata1, se.fit = FALSE)
mean(Ey1t$surv[max(which(Ey1t$time <= 3000)), ]) -
mean(Ey0t$surv[max(which(Ey0t$time <= 3000)), ])
stdcfit <- stdCoxph(cfit, data = sdata, X = "hormon", x = c(0, 1))
?stdCoxph
stdcfit <- stdCoxph(cfit, data = sdata, X = "hormon", x = c(0, 1),
t = 3000)
summary(stdcfit, contrast = "difference", reference = 0)
mean(Ey1t$surv[max(which(Ey1t$time <= 3000)), ]) -
mean(Ey0t$surv[max(which(Ey0t$time <= 3000)), ])
